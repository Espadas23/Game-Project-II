/*using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
public class PlayerController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float moveSpeed = 5f;           // —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–≥–∞
    public float jumpForce = 12f;          // —Å–∏–ª–∞ –ø—Ä—ã–∂–∫–∞

    [Header("Ground Check")]
    public Transform groundCheck;          // –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —á—É—Ç—å –ø–æ–¥ –Ω–æ–≥–∞–º–∏
    public float groundCheckRadius = 0.12f;
    public LayerMask groundLayer;

    [Header("Jump Helpers")]
    public float coyoteTime = 0.12f;       // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ—Ç—Ä—ã–≤–∞ –æ—Ç –∑–µ–º–ª–∏
    public float jumpBufferTime = 0.12f;   // –±—É—Ñ–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –ø–µ—Ä–µ–¥ –∫–∞—Å–∞–Ω–∏–µ–º –∑–µ–º–ª–∏

    [Header("Animation")]
    public Animator animator;

    // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
    private Rigidbody2D rb;
    private float moveInput;
    private bool isGrounded;
    private float coyoteTimer;
    private float jumpBufferTimer;
    private Vector3 initialScale;

    void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        if (animator == null) animator = GetComponent<Animator>();
        initialScale = transform.localScale;

        rb.freezeRotation = true; // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –±–æ–∫
    }

    void Update()
    {
        // --- –ß—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        moveInput = 0f;
        if (Keyboard.current != null)
        {
            if (Keyboard.current.aKey.isPressed) moveInput -= 1f;
            if (Keyboard.current.dKey.isPressed) moveInput += 1f;

            if (Keyboard.current.spaceKey.wasPressedThisFrame)
                jumpBufferTimer = jumpBufferTime;
        }
        else
        {
            moveInput = Input.GetAxisRaw("Horizontal");
            if (Input.GetKeyDown(KeyCode.Space)) jumpBufferTimer = jumpBufferTime;
        }

        // --- Ground Check
        isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer);

        if (isGrounded) coyoteTimer = coyoteTime;
        else coyoteTimer -= Time.deltaTime;

        jumpBufferTimer -= Time.deltaTime;

        // --- –ü—Ä—ã–∂–æ–∫
        if (jumpBufferTimer > 0f && coyoteTimer > 0f)
        {
            rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);

            // üéµ –∑–≤—É–∫ –ø—Ä—ã–∂–∫–∞
            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayJump();

            jumpBufferTimer = 0f;
            coyoteTimer = 0f;
        }

        // --- –§–ª–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (moveInput > 0.01f) transform.localScale = new Vector3(Mathf.Abs(initialScale.x), initialScale.y, initialScale.z);
        else if (moveInput < -0.01f) transform.localScale = new Vector3(-Mathf.Abs(initialScale.x), initialScale.y, initialScale.z);

        // --- –ê–Ω–∏–º–∞—Ü–∏–∏
        animator.SetFloat("Speed", Mathf.Abs(rb.linearVelocity.x)); 
        animator.SetBool("isGrounded", isGrounded);
        animator.SetFloat("yVelocity", rb.linearVelocity.y);

        // üéµ —à–∞–≥–∏: –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–¥–µ–º –ø–æ –∑–µ–º–ª–µ
        if (Mathf.Abs(moveInput) > 0.01f && isGrounded)
        {
            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayFootsteps();
        }
        else
        {
            if (SoundManager.Instance != null)
                SoundManager.Instance.StopFootsteps();
        }
    }

    void FixedUpdate()
    {
        // –¥–≤–∏–∂–µ–Ω–∏–µ
        rb.linearVelocity = new Vector2(moveInput * moveSpeed, rb.linearVelocity.y);
    }

    void OnDrawGizmosSelected()
    {
        if (groundCheck != null)
        {
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(groundCheck.position, groundCheckRadius);
        }
    }
}*/


using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
public class PlayerController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float moveSpeed = 5f;
    public float jumpForce = 12f;

    [Header("Ground Check")]
    public Transform groundCheck;
    public float groundCheckRadius = 0.12f;
    public LayerMask groundLayer;

    [Header("Jump Helpers")]
    public float coyoteTime = 0.12f;
    public float jumpBufferTime = 0.12f;

    [Header("Animation")]
    public Animator animator;

    [Header("Flashlight Reference")]
    public Flashlight flashlight; // —Å—é–¥–∞ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –æ–±—ä–µ–∫—Ç —Ñ–æ–Ω–∞—Ä–∏–∫–∞

    // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
    private Rigidbody2D rb;
    private float moveInput;
    private bool isGrounded;
    private float coyoteTimer;
    private float jumpBufferTimer;
    private Vector3 initialScale;

    void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        if (animator == null) animator = GetComponent<Animator>();
        initialScale = transform.localScale;

        rb.freezeRotation = true;
    }

    void Update()
    {
        // --- –ß—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        moveInput = 0f;
        if (Keyboard.current != null)
        {
            if (Keyboard.current.aKey.isPressed) moveInput -= 1f;
            if (Keyboard.current.dKey.isPressed) moveInput += 1f;
            if (Keyboard.current.spaceKey.wasPressedThisFrame)
                jumpBufferTimer = jumpBufferTime;
        }
        else
        {
            moveInput = Input.GetAxisRaw("Horizontal");
            if (Input.GetKeyDown(KeyCode.Space)) jumpBufferTimer = jumpBufferTime;
        }

        // --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞
        if (flashlight != null && !flashlight.hasActivatedOnce)
            moveInput = 0f;

        // --- Ground Check
        isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer);

        if (isGrounded) coyoteTimer = coyoteTime;
        else coyoteTimer -= Time.deltaTime;

        jumpBufferTimer -= Time.deltaTime;

        // --- –ü—Ä—ã–∂–æ–∫
        if (jumpBufferTimer > 0f && coyoteTimer > 0f)
        {
            rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
            jumpBufferTimer = 0f;
            coyoteTimer = 0f;

            // üéµ –∑–≤—É–∫ –ø—Ä—ã–∂–∫–∞
            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayJump();
        }

        // --- –§–ª–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (moveInput > 0.01f) transform.localScale = new Vector3(Mathf.Abs(initialScale.x), initialScale.y, initialScale.z);
        else if (moveInput < -0.01f) transform.localScale = new Vector3(-Mathf.Abs(initialScale.x), initialScale.y, initialScale.z);

        // --- –ê–Ω–∏–º–∞—Ü–∏–∏
        animator.SetFloat("Speed", Mathf.Abs(rb.linearVelocity.x));
        animator.SetBool("isGrounded", isGrounded);
        animator.SetFloat("yVelocity", rb.linearVelocity.y);

        // üéµ —à–∞–≥–∏: –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–¥–µ–º –ø–æ –∑–µ–º–ª–µ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (Mathf.Abs(moveInput) > 0.01f && isGrounded && (flashlight == null || flashlight.hasActivatedOnce))
        {
            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayFootsteps();
        }
        else
        {
            if (SoundManager.Instance != null)
                SoundManager.Instance.StopFootsteps();
        }
    }

    void FixedUpdate()
    {
        // –¥–≤–∏–∂–µ–Ω–∏–µ
        rb.linearVelocity = new Vector2(moveInput * moveSpeed, rb.linearVelocity.y);
    }

    void OnDrawGizmosSelected()
    {
        if (groundCheck != null)
        {
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(groundCheck.position, groundCheckRadius);
        }
    }
}


