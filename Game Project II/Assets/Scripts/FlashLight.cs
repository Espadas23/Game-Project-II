/*using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.InputSystem;

public class Flashlight : MonoBehaviour
{
    [Header("Components")]
    public Light2D flashlight;

    [Header("Settings")]
    public bool isOn = false;
    public Key toggleKey = Key.F;
    public float rotationSpeed = 10f;
    public float intensitySpeed = 5f;
    public float maxIntensity = 1.5f;
    public float minIntensity = 0f;

    [Header("Sprite Orientation")]
    public bool spriteLooksUp = false; // –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç —Å–º–æ—Ç—Ä–∏—Ç –≤–≤–µ—Ä—Ö, –ø–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É

    void Update()
    {
        // --- –í–∫–ª/–≤—ã–∫–ª —Å–≤–µ—Ç–∞
        if (Keyboard.current[toggleKey].wasPressedThisFrame)
        {
            isOn = !isOn;

            // üéµ –∑–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞
            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayFlashlightToggle();
        }

        if (flashlight != null)
        {
            float targetIntensity = isOn ? maxIntensity : minIntensity;
            flashlight.intensity = Mathf.Lerp(flashlight.intensity, targetIntensity, intensitySpeed * Time.deltaTime);
        }

        // --- –ü–æ–≤–æ—Ä–æ—Ç –∫ –∫—É—Ä—Å–æ—Ä—É
        Vector3 mousePos = Mouse.current.position.ReadValue();
        mousePos = Camera.main.ScreenToWorldPoint(mousePos);
        mousePos.z = 0f;

        Vector2 direction = (mousePos - transform.position).normalized;
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;

        // –°–¥–≤–∏–≥ —É–≥–ª–∞ –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç —Å–º–æ—Ç—Ä–∏—Ç –≤–≤–µ—Ä—Ö
        if (spriteLooksUp)
            targetAngle -= 90f;

        float angle = Mathf.LerpAngle(transform.eulerAngles.z, targetAngle, rotationSpeed * Time.deltaTime);
        transform.rotation = Quaternion.Euler(0f, 0f, angle);
    }
}*/

/*using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.InputSystem;

public class Flashlight : MonoBehaviour
{
    [Header("Components")]
    public Light2D flashlight;

    [Header("Settings")]
    public bool isOn = false;
    public Key toggleKey = Key.F;
    public float rotationSpeed = 10f;
    public float intensitySpeed = 5f;
    public float maxIntensity = 1.5f;
    public float minIntensity = 0f;

    [Header("Radius Shrink Settings")]
    public float shrinkDelay = 1f;       // —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∂–∞—Ç–∏–µ
    public float shrinkSpeed = 0.5f;     // —Å–∫–æ—Ä–æ—Å—Ç—å —Å—É–∂–µ–Ω–∏—è
    public float minRadius = 1f;         // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
    private float shrinkTimer;

    [Header("Sprite Orientation")]
    public bool spriteLooksUp = false; // –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç —Å–º–æ—Ç—Ä–∏—Ç –≤–≤–µ—Ä—Ö, –ø–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É

    [HideInInspector]
    public bool hasActivatedOnce = false; // –≤–∫–ª—é—á–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ñ–æ–Ω–∞—Ä–∏–∫ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑

    void Start()
    {
        shrinkTimer = shrinkDelay;
    }

    void Update()
    {
        // --- –í–∫–ª/–≤—ã–∫–ª —Å–≤–µ—Ç–∞
        if (Keyboard.current[toggleKey].wasPressedThisFrame)
        {
            isOn = !isOn;

            // –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤–∫–ª—é—á–∏–ª —Ñ–æ–Ω–∞—Ä–∏–∫ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
            if (isOn) hasActivatedOnce = true;

            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayFlashlightToggle();
        }

        // --- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞
        if (flashlight != null)
        {
            float targetIntensity = isOn ? maxIntensity : minIntensity;
            flashlight.intensity = Mathf.Lerp(flashlight.intensity, targetIntensity, intensitySpeed * Time.deltaTime);
        }

        // --- –ü–æ–≤–æ—Ä–æ—Ç –∫ –∫—É—Ä—Å–æ—Ä—É
        Vector3 mousePos = Mouse.current.position.ReadValue();
        mousePos = Camera.main.ScreenToWorldPoint(mousePos);
        mousePos.z = 0f;

        Vector2 direction = (mousePos - transform.position).normalized;
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;

        if (spriteLooksUp)
            targetAngle -= 90f;

        float angle = Mathf.LerpAngle(transform.eulerAngles.z, targetAngle, rotationSpeed * Time.deltaTime);
        transform.rotation = Quaternion.Euler(0f, 0f, angle);

        // --- –¢–∞–π–º–µ—Ä —Å—É–∂–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
        if (isOn && flashlight != null)
        {
            shrinkTimer -= Time.deltaTime;
            if (shrinkTimer <= 0f)
            {
                flashlight.pointLightOuterRadius = Mathf.Max(minRadius, flashlight.pointLightOuterRadius - shrinkSpeed * Time.deltaTime);
            }
        }
    }

    // –í—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    public void RestoreRadius(float fullRadius)
    {
        if (flashlight != null)
        {
            flashlight.pointLightOuterRadius = fullRadius;
            shrinkTimer = shrinkDelay; // —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
        }
    }
}*/

/*using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.InputSystem;

public class Flashlight : MonoBehaviour
{
    [Header("Components")]
    public Light2D flashlight;

    [Header("Settings")]
    public bool isOn = false;
    public Key toggleKey = Key.F;
    public float rotationSpeed = 10f;
    public float intensitySpeed = 5f;
    public float maxIntensity = 1.5f;
    public float minIntensity = 0f;

    [Header("Radius Shrink Settings")]
    public float shrinkDelay = 1f;       
    public float shrinkSpeed = 0.5f;     
    public float minRadius = 1f;         
    private float shrinkTimer;

    [Header("Sprite Orientation")]
    public bool spriteLooksUp = false;

    [HideInInspector]
    public bool hasActivatedOnce = false;

    [HideInInspector]
    public bool canTurnOnFlashlight = true; // –ú–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–æ–Ω–∞—Ä—å –∫–Ω–æ–ø–∫–æ–π F
    [HideInInspector]
    public bool isBurnedOut = false; // –§–æ–Ω–∞—Ä–∏–∫ –ø–æ–≥–∞—Å –ø–æ —Ç–∞–π–º–µ—Ä—É

    void Start()
    {
        shrinkTimer = shrinkDelay;
    }

    void Update()
    {
        // --- –í–∫–ª/–≤—ã–∫–ª —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ F, —É—á–∏—Ç—ã–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫—É ---
        if (Keyboard.current[toggleKey].wasPressedThisFrame && canTurnOnFlashlight && !isBurnedOut)
        {
            isOn = !isOn;

            if (isOn) hasActivatedOnce = true;

            if (SoundManager.Instance != null)
                SoundManager.Instance.PlayFlashlightToggle();
        }

        // --- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞ ---
        if (flashlight != null)
        {
            float targetIntensity = isOn ? maxIntensity : minIntensity;
            flashlight.intensity = Mathf.Lerp(flashlight.intensity, targetIntensity, intensitySpeed * Time.deltaTime);
        }

        // --- –ü–æ–≤–æ—Ä–æ—Ç –∫ –∫—É—Ä—Å–æ—Ä—É ---
        Vector3 mousePos = Mouse.current.position.ReadValue();
        mousePos = Camera.main.ScreenToWorldPoint(mousePos);
        mousePos.z = 0f;

        Vector2 direction = (mousePos - transform.position).normalized;
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;

        if (spriteLooksUp)
            targetAngle -= 90f;

        float angle = Mathf.LerpAngle(transform.eulerAngles.z, targetAngle, rotationSpeed * Time.deltaTime);
        transform.rotation = Quaternion.Euler(0f, 0f, angle);

        // --- –¢–∞–π–º–µ—Ä —Å—É–∂–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ ---
        if (isOn && flashlight != null && !isBurnedOut)
        {
            shrinkTimer -= Time.deltaTime;
            if (shrinkTimer <= 0f)
            {
                flashlight.pointLightOuterRadius = Mathf.Max(minRadius, flashlight.pointLightOuterRadius - shrinkSpeed * Time.deltaTime);

                // –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí —Ñ–æ–Ω–∞—Ä—å "–≤—ã–≥–æ—Ä–µ–ª"
                if (flashlight.pointLightOuterRadius <= minRadius + 0.01f)
                {
                    BurnOut();
                }
            }
        }
    }

    // –í—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    public void RestoreRadius(float fullRadius)
    {
        if (flashlight != null)
        {
            flashlight.pointLightOuterRadius = fullRadius;
            shrinkTimer = shrinkDelay;
            isOn = true; // —Ñ–æ–Ω–∞—Ä—å –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            canTurnOnFlashlight = true; // –∫–Ω–æ–ø–∫–∞ F —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            isBurnedOut = false; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        }
    }

    // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ñ–æ–Ω–∞—Ä—å –ø–æ–≥–∞—Å –ø–æ —Ç–∞–π–º–µ—Ä—É
    private void BurnOut()
    {
        isOn = false;
        canTurnOnFlashlight = false; // –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è
        isBurnedOut = true;          // —Ñ–æ–Ω–∞—Ä—å –ø–æ–≥–∞—Å, –Ω–µ–ª—å–∑—è –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–∞–π–º–µ—Ä —Å–º–µ—Ä—Ç–∏
    }
}*/


using UnityEngine;
using UnityEngine.Rendering.Universal;
using UnityEngine.InputSystem;

public class Flashlight : MonoBehaviour
{
    [Header("Components")]
    public Light2D flashlight;

    [Header("Settings")]
    public bool isOn = false;
    public Key toggleKey = Key.F;
    public float rotationSpeed = 10f;
    public float intensitySpeed = 5f;
    public float maxIntensity = 1.5f;
    public float minIntensity = 0f;

    [Header("Radius Shrink Settings")]
    public float shrinkDelay = 1f;       
    public float shrinkSpeed = 0.5f;     
    public float minRadius = 1f;         
    private float shrinkTimer;

    [Header("Sprite Orientation")]
    public bool spriteLooksUp = false;

    [HideInInspector]
    public bool hasActivatedOnce = false;

    [HideInInspector]
    public bool canTurnOnFlashlight = true; // –ú–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–æ–Ω–∞—Ä—å –∫–Ω–æ–ø–∫–æ–π F
    [HideInInspector]
    public bool isBurnedOut = false;        // –§–æ–Ω–∞—Ä–∏–∫ –ø–æ–≥–∞—Å –ø–æ —Ç–∞–π–º–µ—Ä—É

    void Start()
    {
        shrinkTimer = shrinkDelay;
    }

    void Update()
    {
        // --- –í–∫–ª/–≤—ã–∫–ª —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ F ---
        if (Keyboard.current[toggleKey].wasPressedThisFrame)
        {
            // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–∫–ª—é—á–∞—Ç—å –≤—Å–µ–≥–¥–∞, –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ–Ω–∞—Ä—å –Ω–µ –≤—ã–≥–æ—Ä–µ–ª
            if (isOn || (!isBurnedOut && canTurnOnFlashlight)) // <-- –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            {
                isOn = !isOn;

                if (isOn) hasActivatedOnce = true;

                if (SoundManager.Instance != null)
                    SoundManager.Instance.PlayFlashlightToggle();
            }
        }

        // --- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞ ---
        if (flashlight != null)
        {
            float targetIntensity = isOn ? maxIntensity : minIntensity;
            flashlight.intensity = Mathf.Lerp(flashlight.intensity, targetIntensity, intensitySpeed * Time.deltaTime);
        }

        // --- –ü–æ–≤–æ—Ä–æ—Ç –∫ –∫—É—Ä—Å–æ—Ä—É ---
        Vector3 mousePos = Mouse.current.position.ReadValue();
        mousePos = Camera.main.ScreenToWorldPoint(mousePos);
        mousePos.z = 0f;

        Vector2 direction = (mousePos - transform.position).normalized;
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;

        if (spriteLooksUp)
            targetAngle -= 90f;

        float angle = Mathf.LerpAngle(transform.eulerAngles.z, targetAngle, rotationSpeed * Time.deltaTime);
        transform.rotation = Quaternion.Euler(0f, 0f, angle);

        // --- –¢–∞–π–º–µ—Ä —Å—É–∂–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ ---
        if (isOn && flashlight != null && !isBurnedOut)
        {
            shrinkTimer -= Time.deltaTime;
            if (shrinkTimer <= 0f)
            {
                flashlight.pointLightOuterRadius = Mathf.Max(minRadius, flashlight.pointLightOuterRadius - shrinkSpeed * Time.deltaTime);

                // –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí —Ñ–æ–Ω–∞—Ä—å "–≤—ã–≥–æ—Ä–µ–ª"
                if (flashlight.pointLightOuterRadius <= minRadius + 0.01f)
                {
                    BurnOut();
                }
            }
        }
    }

    // –í—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    public void RestoreRadius(float fullRadius)
    {
        if (flashlight != null)
        {
            flashlight.pointLightOuterRadius = fullRadius;
            shrinkTimer = shrinkDelay;

            isBurnedOut = false;        // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            canTurnOnFlashlight = true; // –∫–Ω–æ–ø–∫–∞ F —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç

            isOn = true;                // –≤–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–∞—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            hasActivatedOnce = true;
        }
    }

    // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ñ–æ–Ω–∞—Ä—å –ø–æ–≥–∞—Å –ø–æ —Ç–∞–π–º–µ—Ä—É
    private void BurnOut()
    {
        isOn = false;
        canTurnOnFlashlight = false; // –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è
        isBurnedOut = true;          // —Ñ–æ–Ω–∞—Ä—å –ø–æ–≥–∞—Å, –Ω–µ–ª—å–∑—è –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–∞–π–º–µ—Ä —Å–º–µ—Ä—Ç–∏
    }
}
























